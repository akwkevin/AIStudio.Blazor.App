@page "/Setting/MainLayoutSetting"
@using AIStudio.Blazor.UI.Models.Settings
@using Blazored.LocalStorage
@using Microsoft.Extensions.Options

@implements IReuseTabsPage
@inherits AntDomComponentBase

<div>
    <Form Model="@Layout">
        <FormItem Label="多页签模式">
            <Switch Size="small" @bind-Value="context.MultiTab" />
        </FormItem>
        <FormItem Label="手风琴模式">
            <Switch Size="small" @bind-Value="context.Accordion" />
        </FormItem>
        <FormItem Label="菜单栏主题">
            <RadioGroup @bind-Value="@context.LeftMenuTheme" TValue="AIStudio.Blazor.UI.Models.Settings.LayoutSettings.LeftMenuThemeEnum">
                <Radio Value="AIStudio.Blazor.UI.Models.Settings.LayoutSettings.LeftMenuThemeEnum.Light">明亮</Radio>
                <Radio Value="AIStudio.Blazor.UI.Models.Settings.LayoutSettings.LeftMenuThemeEnum.Dark">暗黑</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem Label="主题模式">
            <RadioGroup @bind-Value="@context.Theme" TValue="string">
                <Radio Value="@("ant-design-blazor.css")">默认主题</Radio>
                <Radio Value="@("ant-design-blazor.aliyun.css")">阿里云主题</Radio>
                <Radio Value="@("ant-design-blazor.dark.css")">暗黑主题</Radio>
                <Radio Value="@("ant-design-blazor.compact.css")">紧凑主题</Radio>
            </RadioGroup>
        </FormItem>
        <FormItem>
            <Space Size="@("small")">
                <SpaceItem>
                    <Button Icon="setting" Type="@ButtonType.Primary" OnClick="SaveSetting">保存布局</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Icon="copy" Type="@ButtonType.Primary" OnClick="CopySetting">复制布局</Button>
                </SpaceItem>
            </Space>
        </FormItem>
    </Form>
</div>

<link type="text/css" rel="stylesheet" id="theme-style" href="@_url" @ref="_linkRef">

@code {

    private ElementReference _linkRef;
    private string _url;

    [Inject]
    IOptions<LayoutSettings> LayoutSettings { get; set; }

    [Inject]
    ILocalStorageService StorageService { get; set; }

    [Inject]
    MessageService MessageService { get; set; }

    LayoutSettings Layout { get { return LayoutSettings.Value; } }

    static readonly Dictionary<string, string> ThemeColors = new Dictionary<string, string>
        {
        {"#1890ff", "daybreak"},
        {"#F5222D", "dust"},
        {"#FA541C", "volcano"},
        {"#FAAD14", "sunset"},
        {"#13C2C2", "cyan"},
        {"#52C41A", "green"},
        {"#2F54EB", "geekblue"},
        {"#722ED1", "purple"}
        };

    ColorItem[] LightColorList { get; set; } = ThemeColors.Select(x => new ColorItem
            {
                Key = x.Value,
                Color = x.Key,
                Theme = "light"
            }).ToArray();

    private void UpdateTheme(string color)
    {
        _ = MessageService.Success("暂未实现");
    }

    private async Task SaveSetting(MouseEventArgs args)
    {
        var json = LayoutSettings.Value.ToJson();
        await StorageService.SetItemAsStringAsync(nameof(Layout), json);
        _ = MessageService.Success("布局保存成功");
    }

    private async Task CopySetting(MouseEventArgs args)
    {
        var json = Layout.ToJson();
        await JsInvokeAsync<object>
        (JSInteropConstants.Copy, json);
        await MessageService.Success("copy success, please replace defaultSettings in wwwroot/appsettings.json");
    }

    public RenderFragment GetPageTitle() =>
    @<div>
        布局设置
    </div>;
}
