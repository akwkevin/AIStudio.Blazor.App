@page "/Base_Manage/Base_LogOperating/List"

@inherits BaseList<Base_LogOperatingDTO>

<Space Size="@("small")">
    <SpaceItem>
        <Select TItem="SelectOption"
                TItemValue="string"
                @bind-Value="@LogType"
                AllowClear
                DataSource="LogTypeList"
                LabelName="@nameof(SelectOption.Text)"
                ValueName="@nameof(SelectOption.Value)"
                Placeholder="类别"
                Style="min-width: 200px;max-width:400px">
        </Select>
    </SpaceItem>
    <SpaceItem>
        <Input @bind-Value="@OpUserName" Placeholder="操作人" AutoComplete=false />
    </SpaceItem>
    <SpaceItem>
        <RangePicker TValue="DateTime?[]" @bind-Value="@RangeTime" Format="yyyy-MM-dd HH:mm:ss" />
    </SpaceItem>
    <SpaceItem>
        <Search Placeholder="内容" EnterButton="true" @bind-Value="@LogContent" disabled=@Loading OnSearch="()=>Refresh()" />
    </SpaceItem>
</Space>

<Table @ref="_table" TItem="Base_LogOperatingDTO" DataSource="Data" Loading="Loading" @bind-PageSize="Pagination.PageRows" @bind-SelectedRows="SelectedItems">
    <ChildContent>
        <Selection Key="@(context.Id)" />
        <AntDesign.Column Title="内容" DataIndex="Result" TData="string" />
        <AntDesign.Column Title="级别" DataIndex="Level" TData="string" />
        <AntDesign.Column Title="类别" DataIndex="LogType" TData="string" />
        <AntDesign.Column Title="操作人" DataIndex="CreatorName" TData="string" />
        <AntDesign.Column Title="时间" DataIndex="CreateTime" TData="DateTime" Format="yyyy-MM-dd HH:mm:ss" />
    </ChildContent>
    <PaginationTemplate>
        <div style="float:right;margin-top:10px">
            <Pagination Total="Pagination.Total"
                        ShowTotal="ShowTotal"
                        ShowSizeChanger
                        PageSize="Pagination.PageRows"
                        Current="Pagination.PageIndex"
                        OnChange="PageIndexChanged"
                        OnShowSizeChange="PageSizeChanged" />
        </div>
    </PaginationTemplate>
</Table>


@code
{
    public List()
    {
        Area = "Base_Manage";
    }


    string LogContent { get; set; }

    string Level { get; set; }

    string LogType { get; set; }

    string OpUserName { get; set; }

    DateTime?[] RangeTime { get; set; } = new DateTime?[2];


    List<SelectOption> LogTypeList { get; set; }

    List<SelectOption> LoglevelList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetLogTypeList();
    }

    private async Task GetLogTypeList()
    {
        try
        {
            var result = await DataProvider.GetData<List<SelectOption>>($"/Base_Manage/Base_UserLog/GetLogTypeList");
            if (!result.Success)
            {
                throw new MsgException(result.Msg);
            }
            else
            {
                LogTypeList = result.Data;
                LogTypeList.Insert(0, new SelectOption() { Value = "", Text = "" });
                LogType = "";
            }
        }
        catch (Exception ex)
        {
            await Error.ProcessError(ex);
        }
    }

    protected override async Task GetData()
    {
        try
        {
            ShowWait();
            var data = new
            {
                PageIndex = Pagination.PageIndex,
                PageRows = Pagination.PageRows,
                SortField = Pagination.SortField,
                SortType = Pagination.SortType,
                Search = new
                {
                    logContent = LogContent,
                    logType = LogType,
                    opUserName = OpUserName,
                    startTime = RangeTime[0].HasValue ? RangeTime[0].Value.ToString("yyyy-MM-dd hh:mm:ss") : "",
                    endTime = RangeTime[1].HasValue ? RangeTime[1].Value.ToString("yyyy-MM-dd hh:mm:ss") : "",
                }
            };

            var result = await DataProvider.GetData<List<Base_LogOperatingDTO>>($"/Base_Manage/Base_UserLog/GetLogList", data.ToJson());
            if (!result.Success)
            {
                throw new MsgException(result.Msg);
            }
            else
            {
                Pagination.Total = result.Total;
                Data = result.Data;
            }
        }
        catch (Exception ex)
        {
            await Error.ProcessError(ex);
        }
        finally
        {
            HideWait();
        }
    }
}