@page "/Base_Manage/Base_LogSystem/List"

@inherits BaseList<Base_LogSystemDTO>

<Space Size="@("small")">
    <SpaceItem>
        <Select TItem="SelectOption"
                TItemValue="string"
                @bind-Value="@LogType"
                AllowClear
                DataSource="LogTypeList"
                LabelName="@nameof(SelectOption.Text)"
                ValueName="@nameof(SelectOption.Value)"
                Placeholder="类别"
                Style="min-width: 200px;max-width:400px">
        </Select>
    </SpaceItem>
    <SpaceItem>
        <Input @bind-Value="@CreatorName" Placeholder="操作人" AutoComplete=false />
    </SpaceItem>
    <SpaceItem>
        <RangePicker TValue="DateTime?[]" @bind-Value="@RangeTime" Format="yyyy-MM-dd HH:mm:ss" />
    </SpaceItem>
    <SpaceItem>
        <Search Placeholder="内容" EnterButton="true" @bind-Value="@KeyWord" disabled=@Loading OnSearch="()=>Refresh()" />
    </SpaceItem>
</Space>

<Table @ref="_table"
       TItem="Base_LogSystemDTO"
       DataSource="Data"
       Loading="Loading"
       @bind-PageSize="Pagination.PageRows"
       @bind-SelectedRows="SelectedItems"
       ScrollX="800"
       ScrollBarWidth="5px"
       Size=@TableSize.Small
       RowClassName="@(x => x.RowIndex % 2 == 0 ?"gray-2":"")">
    <ChildContent>
        <Selection Key="@(context.Id)" />
        <AntDesign.Column Ellipsis Title="内容" DataIndex="Message" TData="string" />
        <AntDesign.Column Ellipsis Title="类别" DataIndex="LogType" TData="string" />
        <AntDesign.Column Ellipsis Title="名称" DataIndex="Name" TData="string" />
        <AntDesign.Column Ellipsis Title="操作人" DataIndex="CreatorName" TData="string" />
        <AntDesign.Column Ellipsis Title="时间" DataIndex="CreateTime" TData="DateTime" Format="yyyy-MM-dd HH:mm:ss" />
    </ChildContent>
    <PaginationTemplate>
        <div style="float:right;margin-top:10px">
            <Pagination Total="Pagination.Total"
                        ShowTotal="ShowTotal"
                        ShowSizeChanger
                        PageSize="Pagination.PageRows"
                        Current="Pagination.PageIndex"
                        OnChange="PageIndexChanged"
                        OnShowSizeChange="PageSizeChanged" />
        </div>
    </PaginationTemplate>
</Table>

<style>
    .gray-2 {
        background-color: #fafafa;
    }
</style>

@code
{
    public List()
    {
        Area = "Base_Manage";
    }

    string? CreatorName { get; set; }

    DateTime?[] RangeTime { get; set; } = new DateTime?[2];

    string LogType { get; set; }
    List<SelectOption> LogTypeList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetLogTypeList();
    }

    private async Task GetLogTypeList()
    {
        try
        {
            var result = await DataProvider.PostData<List<SelectOption>>($"/Base_Manage/Base_LogSystem/GetLogTypeList");
            if (!result.Success)
            {
                throw new MsgException(result.Msg);
            }
            else
            {
                LogTypeList = result.Data;
                LogTypeList.Insert(0, new SelectOption() { Value = "", Text = "" });
                LogType = "";
            }
        }
        catch (Exception ex)
        {
            await Error.ProcessError(ex);
        }
    }

    protected override string GetDataJson()
    {
        var searchKeyValues = new Dictionary<string, object>();
        if (!string.IsNullOrEmpty(Condition) && !string.IsNullOrEmpty(KeyWord))
        {
            searchKeyValues.Add(Condition, KeyWord);
        }
        if (!string.IsNullOrEmpty(LogType))
        {
            searchKeyValues.Add("LogType", LogType);
        }
        if (!string.IsNullOrEmpty(CreatorName))
        {
            searchKeyValues.Add("CreatorName", CreatorName);
        }

        var data = new
        {
            PageIndex = Pagination.PageIndex,
            PageRows = Pagination.PageRows,
            SortField = Pagination.SortField,
            SortType = Pagination.SortType,
            SearchKeyValues = searchKeyValues,
            Search = new
            {
                StartTime = RangeTime[0],
                EndTime = RangeTime[1],
            }
        };

        return data.ToJson();
    }
}