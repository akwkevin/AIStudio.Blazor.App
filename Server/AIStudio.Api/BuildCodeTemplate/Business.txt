using AIStudio.Business.AOP;
using AIStudio.Common.DI;
using AIStudio.Entity.%areaName%;
using AIStudio.Entity.DTO.%areaName%;
using AIStudio.Entity.DTO.%areaName%.InputDTO;
using AIStudio.IBusiness.%areaName%;
using AIStudio.Util;
using AIStudio.Util.Common;
using Simple.Common;
using SqlSugar;
using System.Linq;
using System.Linq.Dynamic.Core;

namespace AIStudio.Business.%areaName%
{
    public class %entityName%Business : BaseBusiness<%entityName%>, I%entityName%Business, ITransientDependency
    {
        public %entityName%Business(IDbAccessor db)
            : base(db)
        {
        }

        #region 外部接口

        public async Task<PageResult<%entityName%>> GetDataListAsync(PageInput<ConditionDTO> input)
        {
            var q = GetIQueryable();
            var where = LinqHelper.True<%entityName%>();
            var search = input.Search;

            //筛选
            if (!search.condition.IsNullOrEmpty() && !search.keyword.IsNullOrEmpty())
            {
                var newWhere = DynamicExpressionParser.ParseLambda<%entityName%, bool>(
                    ParsingConfig.Default, false, $@"{search.condition}.Contains(@0)", search.keyword);
                where = where.And(newWhere);
            }

            //按字典筛选
            if (input.SearchKeyValues != null)
            {
                foreach (var keyValuePair in input.SearchKeyValues)
                {
                    var newWhere = DynamicExpressionParser.ParseLambda<%entityName%, bool>(
                        ParsingConfig.Default, false, $@"{keyValuePair.Key}.Contains(@0)", keyValuePair.Value);
                    where = where.And(newWhere);
                }
            }

            return await q.Where(where).GetPageResultAsync(input);
        }

        public async Task<%entityName%> GetTheDataAsync(string id)
        {
            return await GetEntityAsync(id);
        }

        public async Task AddDataAsync(%entityName% data)
        {
            await InsertAsync(data);
        }

        public async Task UpdateDataAsync(%entityName% data)
        {
            await UpdateAsync(data);
        }

        public async Task DeleteDataAsync(List<string> ids)
        {
            await DeleteAsync(ids);
        }

        #endregion

        #region 私有成员

        #endregion
    }
}